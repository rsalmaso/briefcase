name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:

env:
  python_version: "3.9"

defaults:
  run:
    shell: bash  # https://github.com/beeware/briefcase/pull/912

jobs:
  pre-commit:
    name: Pre-commit code style checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Set up Python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: ${{ env.python_version }}
      - name: Lint with Pre-commit
        uses: pre-commit/action@v3.0.0

  towncrier:
    runs-on: ubuntu-latest
    steps:
    # Fetch main branch for comparison, then check out current branch.
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
        ref: main
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ env.python_version }}
    - name: Install dev dependencies
      run: |
        # We don't actually want to install briefcase;
        # we just want the dev extras so we have a known version of tox
        python -m pip install -e .[dev]
    - name: Run towncrier check
      run: tox -e towncrier-check

  package:
    runs-on: ubuntu-latest
    steps:
    # Fetch all refs so setuptools_scm can generate the correct version number.
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ env.python_version }}
    - name: Install dev dependencies
      run: |
        # We don't actually want to install briefcase;
        # we just want the dev extras so we have a known version of tox
        python -m pip install -e .[dev]
    - name: Build wheels
      run: tox -e package
    - uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist
        if-no-files-found: error

  unit-tests:
    name: Unit tests
    needs: [pre-commit, towncrier, package]
    runs-on: ${{ matrix.platform }}-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        platform: ["macos", "ubuntu", "windows"]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12-dev"]
        include:
        - experimental: false
        - python-version: "3.12-dev"
          experimental: true
        # Run tests against the latest Windows Store Python
        - platform: "windows"
          python-version: "winstore"
          experimental: false
    steps:
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - name: Set up Python
      if: matrix.python-version != 'winstore'
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Windows Store Python
      if: matrix.python-version == 'winstore'
      uses: beeware/.github/.github/actions/install-win-store-python@main
      with:
        python-version: 3.11
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: dist
    - name: Install dev dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase; we just want the dev
        # extras so we have a known version of tox and coverage.
        python -m pip install $(ls dist/briefcase-*.whl)[dev]
    - name: Test
      run: |
        tox -e py --installpkg dist/briefcase-*.whl
    - name: Store coverage data
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: ".coverage.*"
        if-no-files-found: ignore
    - name: Report platform coverage
      run: |
        python -m coverage combine
        python -m coverage report

  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.5.0
      with:
        # Use latest, so it understands all syntax.
        python-version: '3.x'
    - name: Install dev dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # We don't actually want to install briefcase;
        # we just want the dev extras so that we have a known version of coverage
        python -m pip install -e .[dev]
    - name: Retrieve coverage data
      uses: actions/download-artifact@v3
      with:
        name: coverage-data
    - name: Combine coverage
      run: |
        python -m coverage combine
    - name: Generate coverage report
      run: |
        python -m coverage html --skip-covered --skip-empty
        python -m coverage report --fail-under=100
    - name: Upload HTML report if check failed.
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: htmlcov
      if: ${{ failure() }}

  verify-apps:
    name: Build apps
    needs: [unit-tests]
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        os_name: ['macOS', 'windows', 'linux']
        framework: ['toga', 'pyside2', 'pyside6', 'ppb']
        include:
        - os_name: macOS
          platform: macos-12
          briefcase-data-dir: ~/Library/Caches/org.beeware.briefcase
          pip-cache-dir: ~/Library/Caches/pip
          docker-cache-dir: ~/Library/Containers/com.docker.docker/Data/vms/0/
        - os_name: windows
          platform: windows-latest
          briefcase-data-dir: ~\AppData\Local\BeeWare\briefcase\Cache
          pip-cache-dir: ~\AppData\Local\pip\Cache
          docker-cache-dir: C:\ProgramData\DockerDesktop
        - os_name: linux
          # Need to use at least 22.04 to get the bugfix in flatpak for handling spaces in filenames.
          platform: ubuntu-22.04
          briefcase-data-dir: ~/.cache/briefcase
          pip-cache-dir: ~/.cache/pip
          # cache action cannot cache docker images (actions/cache#31)
          # docker-cache-dir: /var/lib/docker
    steps:
    - name: Cache Briefcase tools
      uses: actions/cache@v3.2.4
      with:
        key: briefcase-${{ matrix.platform }}
        path: |
          ~/.cookiecutters
          ${{ matrix.briefcase-data-dir }}
          ${{ matrix.pip-cache-dir }}
          ${{ matrix.docker-cache-dir }}
    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ env.python_version }}
    - name: Install system dependencies
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y flatpak flatpak-builder
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: dist
    - name: Install packages
      run: python -m pip install dist/briefcase-*.whl
    - name: Create App
      run: |
        cd tests/apps
        cat verify-${{ matrix.framework }}.config | briefcase new
    - name: Build App
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create
        briefcase build
        briefcase package --adhoc-sign
    - name: Build Xcode project
      if: matrix.os_name == 'macOS'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} Xcode
        briefcase build ${{ matrix.os_name }} Xcode
        briefcase package ${{ matrix.os_name }} Xcode --adhoc-sign
    - name: Build Visual Studio project
      if: matrix.os_name == 'windows'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} VisualStudio
        briefcase build ${{ matrix.os_name }} VisualStudio
        briefcase package ${{ matrix.os_name }} VisualStudio --adhoc-sign
    - name: Build Flatpak project
      if: matrix.os_name == 'linux' && matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create ${{ matrix.os_name }} flatpak
        briefcase build ${{ matrix.os_name }} flatpak
        briefcase package ${{ matrix.os_name }} flatpak --adhoc-sign
    - name: Build Android App
      if: matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create android
        briefcase build android
        briefcase package android --adhoc-sign
    - name: Build iOS App
      if: matrix.platform == 'macos-12' && matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create iOS
        briefcase build iOS
        briefcase package iOS --adhoc-sign
    - name: Build Web App
      if: matrix.framework == 'toga'
      run: |
        cd tests/apps/verify-${{ matrix.framework }}
        briefcase create web
        briefcase build web
        briefcase package web
